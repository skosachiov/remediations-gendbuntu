- name: Print all available facts @all_available_facts
  debug:
    var: ansible_facts
  tags:
    - all_available_facts

- name: Monitor applications @monitor_applications
  ignore_errors: "{{ansible_check_mode}}"
  block:
    - name: Monitor applications Append @monitor_applications
      changed_when: false
      failed_when: false
      shell: LANG=C.UTF-8 ps -o user= -p `pgrep {{item}}`
      register: result
      with_items: "{{var_monitored_apps}}"
    - name: Monitor applications Set default @monitor_applications
      changed_when: false
      set_fact:
        users_apps: {}
    - name: Monitor applications Set @monitor_applications
      changed_when: false
      set_fact:
        users_apps: "{{ users_apps | combine( { item.item: item.stdout_lines[0] } ) }}"
      when: item.stdout_lines[0] is defined
      with_items: "{{result.results}}"
    - name: Monitor applications Set to json @monitor_applications
      changed_when: false
      set_fact:
        users_apps_json: "{{users_apps|to_json}}"
  tags:
    - ws
    - monitor_applications

- name: Get_boot_parameters @get_boot_parameters
  ignore_errors: "{{ansible_check_mode}}"
  block:
    - name: Get_boot_parameters Efibootmgr @get_boot_parameters
      failed_when: false
      changed_when: false
      command: efibootmgr
      register: boot_efi
    - name: Get_boot_parameters Grub @get_boot_parameters
      failed_when: false
      changed_when: false
      shell: grep ^GRUB_DEFAULT /etc/default/grub | tr -d \'\"
      register: boot_grub
    - name: Get_boot_parameters Set @get_boot_parameters
      changed_when: false
      set_fact:
        boot_parameters:
          efi: "{{boot_efi.stdout_lines if boot_efi.stdout_lines is defined else []}}"
          grub: "{{boot_grub.stdout_lines if boot_grub.stdout_lines is defined else []}}"
  tags:
    - ws
    - get_boot_parameters

- name: Print basic ansible facts @basic_ansible_facts
  ignore_errors: "{{ansible_check_mode}}"
  block:
    - name:  Print main ansible facts Mounts @basic_ansible_facts
      changed_when: false
      failed_when: false
      set_fact:
        var_device: "{{item.device}}"
        var_size_available: "{{(item.size_available/1073741824)|int}}"
      with_items: "{{ansible_mounts}}"
      when: item.mount == '/'
    - name: Print main ansible facts Ntfs @basic_ansible_facts
      check_mode: no
      shell: LANG=C.UTF-8 lsblk -b -o fstype,size -x size | grep ntfs | tail -n 1 | awk '{print $2/1073741824}'
      register: ntfspart
      changed_when: false
      failed_when: false
    - name: Print main ansible facts Who @basic_ansible_facts
      check_mode: no
      shell: 'LANG=C.UTF-8 who -q | tr "\n" " "'
      register: sessions
      changed_when: false
      failed_when: false
    - name: Monitor applications Debug @monitor_applications
      changed_when: false
      set_fact:
        basic_ansible_facts:
          ip: "{{ansible_default_ipv4.address}}"
          netmask: "{{ansible_default_ipv4.netmask}}"
          host_time: "{{ansible_date_time.iso8601}}{{ansible_date_time.tz_offset}}"
          hostname: "{{ansible_fqdn}}"
          kernel: "{{ansible_kernel}}"
          root_dev: "{{var_device}}"
          free_space: "{{var_size_available}}"
          ntfs_part: "{{ntfspart.stdout_lines[0]|int if ntfspart.stdout_lines[0] is defined else 0}}"
          uptime: "{{ansible_uptime_seconds}}"
          logged_on_users: "{{sessions.stdout_lines[0]}}"
          site: "{{var_subnet}}"
          mac: "{{ansible_default_ipv4.macaddress}}"
          serial: "{{ansible_product_serial}}"
          system_vendor: "{{ansible_system_vendor}}"
          product_version: "{{ansible_product_version}}"
          os_version: "{{ lookup('ini', 'VERSION',  type='properties', file='/etc/os-release') }}"
          geo_coord: "{{var_geo_coord | replace(' ', '')}}"
          company: "{{var_company}}"
          ou: "{{var_ou_guid if var_ou_guid is defined else 'none'}}"
          users_apps: "{{users_apps_json}}"
          boot_parameters: "{{boot_parameters}}"
          machine_id: "{{ansible_machine_id}}"
          product_uuid: "{{ansible_product_uuid}}"
    - name: Print main ansible facts @basic_ansible_facts
      changed_when: false
      failed_when: false
      syslogger:
        msg:  "basic_ansible_facts: {{basic_ansible_facts}}"
  tags:
    - ws
    - basic_ansible_facts

- name: Get sensors info @get_sensors_info
  ignore_errors: "{{ansible_check_mode}}"
  block:
    - name: Get sensors info Lm-sensors present @get_sensors_info
      package:
        name: lm-sensors
        state: present
      when: ansible_pkg_mgr == 'apt'
    - name: Get sensors info Lm-sensors present rpm @get_sensors_info
      package:
        name: lm_sensors
        state: present
      when: ansible_pkg_mgr == 'dnf'
    - name: Get sensors info Smartmontools present @get_sensors_info
      package:
        name: smartmontools
        state: present
      register: status
      until: status is success
      delay: 30
      retries: 5
    - name: Get sensors info Sensors @get_sensors_info
      shell: "sensors"
      register: items
      changed_when: false
      failed_when: no
    - debug:
        msg: "{{items}}"
    - name: Get sensors info Smartctl @get_sensors_info
      shell: "smartctl -a $(df -hT | grep /$ | awk '{print $1}')"
      register: items
      changed_when: false
      failed_when: no
    - debug:
        msg: "{{items}}"
  tags:
    - ws
    - get_sensors_info

- name: Get system load average @get_load_average
  ignore_errors: "{{ansible_check_mode}}"
  block:
    - name: Get system load average Sysstat present @get_load_average
      package:
        name: sysstat
        state: present
    - name: Get system load average Lineinfile @get_load_average
      lineinfile:
        dest: /etc/default/sysstat
        state: present
        regexp: ^#?\s*ENABLED
        line: ENABLED="true"
      notify: Sysstat restarted
      when: ansible_pkg_mgr == 'apt'
    - name: Get sysstat info @get_load_average
      shell: "sar -q"
      register: items
      changed_when: false
      failed_when: false
    - debug:
        msg: "{{items}}"
  tags:
    - ws
    - get_load_average

- name: Print basic security facts @basic_security_facts
  ignore_errors: "{{ansible_check_mode}}"
  block:
    - name: Print mandatory access facts Get @basic_security_facts
      changed_when: false
      failed_when: false
      check_mode: no
      shell: cat /proc/cmdline
      register: result_proc_cmdline
    - name: Print mandatory access facts Get @basic_security_facts
      changed_when: false
      failed_when: false
      check_mode: no
      shell: LANG=C.UTF-8 sestatus
      register: result_sestatus
    - name: Print mandatory access facts Set @basic_security_facts
      set_fact:
        result_ma:  false
        result_mcs: false
        result_mls: false
        result_ima: "{{ result_proc_cmdline.stdout_lines | regex_search('ima=[a-z]+') }}"
    - name: Print mandatory access facts Set @basic_security_facts
      set_fact:
        result_ma:  "{{ result_sestatus.stdout_lines | regex_search('SELinux status:\\s[a-z]+') }}"
        result_mcs: "{{ result_sestatus.stdout_lines | regex_search('Current mode:\\s[a-z]+') }}"
        result_mls: "{{ result_sestatus.stdout_lines | regex_search('Policy MLS status:\\s[a-z]+') }}"
      when: result_sestatus.rc == 0
    - name: Print host flags Vars @basic_security_facts
      set_fact:
        result_flags: >
          {{ 'ma' if var_mandatory_access else '' }}
          {{ 'aw' if var_admin_workstation else '' }}
          {{ 'sw' if var_superadmin_workstation else '' }}
          {{ 'pw' if var_programmer_workstation else '' }}
          {{ 'na' if var_network_auditd else '' }}
          {{ 'ao' if var_always_on_display else '' }}
          {{ 'dw' if var_devel_workstation else '' }}
          {{ 'uo' if var_unrestricted_os else '' }}
          {{ 'ro' if var_restricted_os else '' }}
          {{ 'tc' if var_thin_client else '' }}
          {{ 'he' if var_home_with_exec else '' }}
          {{ 'du' if var_dist_upgrade else '' }}
          {{ 'mu' if var_manual_updates else '' }}
          {{ 'fa' if var_fapolicyd_service else '' }}
          {{ 'fu' if var_fs_userspace else '' }}
          {{ 'kd' if var_preffered_desktop == 'kde' else '' }}
          {{ 'uf' if var_preferred_dlp == 'usbguard' else '' }}
    - name: Print main ansible facts @basic_security_facts
      changed_when: false
      set_fact:
        basic_security_facts:
          ma:  "{{result_ma}}"
          mcs: "{{result_mcs}}"
          mls: "{{result_mls}}"
          ima: "{{result_ima}}"
          dlp_aux: "{{var_aux_dlp_active if var_aux_dlp_active is defined else false }}"
          av_aux: "{{var_aux_av_active if var_aux_av_active is defined else false }}"
          host_flags: "{{result_flags.split() | join(':')}}"
    - name: Print main ansible facts @basic_security_facts
      changed_when: false
      ignore_errors: true
      syslogger:
        msg: "basic_security_facts: {{basic_security_facts}}"
  rescue:
    - name: Print basic security facts Failed
      debug:
        msg: "Print basic security facts failed"
  tags:
    - ws
    - basic_security_facts

- name: Packages full inventory @monitored_packages
  ignore_errors: "{{ansible_check_mode}}"
  block:
    - name: Packages full inventory Facts @monitored_packages
      package_facts:
        manager: auto
    - name: Packages full inventory Set @monitored_packages
      changed_when: false
      set_fact:
        monitored_pkgs: {}
    - name: Packages full inventory Set @monitored_packages
      changed_when: false
      set_fact:
        monitored_pkgs: "{{ monitored_pkgs | combine( { item: ansible_facts.packages[item][0] } )}}"
      when: ansible_facts.packages[item] is defined
      with_items: "{{var_monitored_pkgs}}"
    - name: Packages full inventory Syslogger @monitored_packages
      changed_when: false
      ignore_errors: true
      syslogger:
        msg: "ansible_facts_packages: {{monitored_pkgs}}"
  tags:
    - ws
    - monitored_packages

- name: Locally installed packages @locally_installed_packages
  ignore_errors: true
  block:
    - name: Locally installed packages Present @locally_installed_packages
      package:
        name: aptitude
        state: present
    - name: Locally installed packages Aptitude @locally_installed_packages
      changed_when: false
      command: aptitude search ~o -F %p
      register: result
    - name: Locally installed packages Set @monitored_packages
      changed_when: false
      set_fact:
         locally_installed_packages: "{{ locally_installed_packages|default([]) + [item] }}"
      when: result.stdout_lines|length > 0
      with_items: "{{result.stdout_lines}}"
    - name: Locally installed packages Set @monitored_packages
      changed_when: false
      set_fact:
        locally_installed:
          packages: "{{locally_installed_packages}}"
      when: locally_installed_packages is defined
    - name: Locally installed packages Syslogger @monitored_packages
      changed_when: false
      syslogger:
        msg: "locally_installed: {{locally_installed}}"
      when: locally_installed is defined
  when: ansible_pkg_mgr == 'apt'
  tags:
    - ws
    - locally_installed_packages

- name: Log on efi partition @log_on_efi_partition
  ignore_errors: true
  block:
    - name: Log on efi partition Stat @log_on_efi_partition
      stat:
        path: /sys/firmware/efi
      register: result
    - name: Log on efi partition Get loaders @log_on_efi_partition
      changed_when: false
      shell: find /boot/efi/ -name "*.efi" -exec grep -aHoP "\(,?gpt[0-9]\)(\/[a-z]+)+" {} \;
      register: grep_gpt_efi
    - name: Log on efi partition Get efibootmgr @log_on_efi_partition
      changed_when: false
      command: efibootmgr -v
      register: efibootmgr_verbose
    - name: Log on efi partition Get grub.cfg @log_on_efi_partition
      set_fact:
        file_grub_cfg:  "{{ lookup('file', file='/boot/grub/grub.cfg') }}"
    - name: Log on efi partition Combine @log_on_efi_partition
      set_fact:
        ansible_facts_enriched:  "{{ ansible_facts \
          | combine({'grep_gpt_efi': grep_gpt_efi}, {'efibootmgr_verbose': efibootmgr_verbose}, {'file_grub_cfg': file_grub_cfg}) }}"
    - name: Log on efi partition Copy @log_on_efi_partition
      changed_when: false
      copy:
        dest: /boot/efi/EFI/ansible_facts.json
        content: "{{ansible_facts_enriched | to_nice_json}}"
      when: result.stat.exists
  tags:
    - ws
    - log_on_efi_partition