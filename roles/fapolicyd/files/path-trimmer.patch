diff --git a/doc/fapolicyd.conf.5 b/doc/fapolicyd.conf.5
index 0454e6f..66b48a3 100644
--- a/doc/fapolicyd.conf.5
+++ b/doc/fapolicyd.conf.5
@@ -95,6 +95,10 @@ When this option is set to 1, it allows fapolicyd to monitor file access events
 .B report_interval
 This option specifies a reporting interval, measured in seconds, which fapolicyd uses to schedule a recurring dump of internal performance statistics to the \fBfapolicyd.state\fP file. The default value of 0 disables interval reporting.

+.TP
+.B path_trimmer
+This option specifies the path transformation before adding to the database and before file checking. For example, if all users on the host use certain software, e.g. flatpak, from their home directories, you might want to exclude /home/<user> or may be /mnt/nfs/home from the file path checking. POSIX-compatible regex mode is used, the resulting value is the last capturing regex group. For example, expression /(home|mnt/nfs/home)/[^/]+/(.*) returns the same relative paths to applications for all users. Note that there is no need to enclose the expression in quotation marks, a single $ sign will be interpreted as an match nothing expression. The default value is the match nothing.
+
 .SH "SEE ALSO"
 .BR fapolicyd (8),
 .BR fapolicyd-cli (8)
diff --git a/init/fapolicyd.conf b/init/fapolicyd.conf
index a2e597f..d0648bd 100644
--- a/init/fapolicyd.conf
+++ b/init/fapolicyd.conf
@@ -20,3 +20,4 @@ syslog_format = rule,dec,perm,auid,pid,exe,:,path,ftype,trust
 rpm_sha256_only = 0
 allow_filesystem_mark = 0
 report_interval = 0
+path_trimmer = $
diff --git a/src/cli/fapolicyd-cli.c b/src/cli/fapolicyd-cli.c
index 0c72733..571896f 100644
--- a/src/cli/fapolicyd-cli.c
+++ b/src/cli/fapolicyd-cli.c
@@ -51,6 +51,10 @@
 #include "llist.h"
 #include "fd-fgets.h"
 #include "paths.h"
+#include "regex.h"
+
+// Global program variables
+char *path_trimmer = NULL;

 static const char *usage =
 "Fapolicyd CLI Tool\n\n"
diff --git a/src/daemon/fapolicyd.c b/src/daemon/fapolicyd.c
index b9d8904..819a6bf 100644
--- a/src/daemon/fapolicyd.c
+++ b/src/daemon/fapolicyd.c
@@ -60,10 +60,13 @@
 #include "gcc-attributes.h"
 #include "avl.h"
 #include "paths.h"
+#include "regex.h"


 // Global program variables
 unsigned int debug_mode = 0, permissive = 0;
+char *path_trimmer = NULL;
+extern regex_t path_trimmer_compiled;

 // Signal handler notifications
 volatile atomic_bool stop = false, hup = false, run_stats = false;
@@ -500,6 +503,19 @@ int main(int argc, const char *argv[])
                return 1;
        }
        permissive = config.permissive;
+
+    path_trimmer = strdup(config.path_trimmer);
+    if (path_trimmer[0] == '\0' || path_trimmer[0] == '\"' || path_trimmer[0] == '\'' || path_trimmer[0] == '$') {
+        path_trimmer[0] = '\0';
+    }
+    else {
+               if (regcomp(&path_trimmer_compiled, path_trimmer, REG_EXTENDED)) {
+                       msg(LOG_ERR, "could not compile regular path_trimmer expression");
+                       exit(1);
+               }
+               msg(LOG_INFO, "Path trimmer has been compiled %s", path_trimmer);
+    }
+
        for (int i=1; i < argc; i++) {
                if (strcmp(argv[i], "--debug") == 0) {
                        debug_mode = 1;
diff --git a/src/library/conf.h b/src/library/conf.h
index a0aa7b5..f719179 100644
--- a/src/library/conf.h
+++ b/src/library/conf.h
@@ -47,6 +47,7 @@ typedef struct conf
        unsigned int rpm_sha256_only;
        unsigned int allow_filesystem_mark;
     unsigned int report_interval;
+       const char *path_trimmer;
 } conf_t;

 #endif
diff --git a/src/library/daemon-config.c b/src/library/daemon-config.c
index fb255ee..b0590f8 100644
--- a/src/library/daemon-config.c
+++ b/src/library/daemon-config.c
@@ -96,6 +96,8 @@ static int fs_mark_parser(const struct nv_pair *nv, int line,
                conf_t *config);
 static int report_interval_parser(const struct nv_pair *nv, int line,
         conf_t *config);
+static int path_trimmer_parser(const struct nv_pair *nv, int line,
+        conf_t *config);

 static const struct kw_pair keywords[] =
 {
@@ -116,6 +118,7 @@ static const struct kw_pair keywords[] =
   {"rpm_sha256_only", rpm_sha256_only_parser},
   {"allow_filesystem_mark",    fs_mark_parser },
   {"report_interval",  report_interval_parser },
+  {"path_trimmer",     path_trimmer_parser },
   { NULL,              NULL }
 };

@@ -146,6 +149,7 @@ static void clear_daemon_config(conf_t *config)
        config->rpm_sha256_only = 0;
        config->allow_filesystem_mark = 0;
     config->report_interval = 0;
+       config->path_trimmer = strdup("");
 }

 int load_daemon_config(conf_t *config)
@@ -351,6 +355,7 @@ void free_daemon_config(conf_t *config)
        free((void*)config->watch_fs);
        free((void*)config->trust);
        free((void*)config->syslog_format);
+       free((void*)config->path_trimmer);
 }

 static int unsigned_int_parser(unsigned *i, const char *str, int line)
@@ -645,3 +650,14 @@ static int fs_mark_parser(const struct nv_pair *nv, int line,

        return rc;
 }
+
+static int path_trimmer_parser(const struct nv_pair *nv, int line,
+        conf_t *config)
+{
+       free((void *)config->path_trimmer);
+       config->path_trimmer = strdup(nv->value);
+       if (config->path_trimmer)
+               return 0;
+       msg(LOG_ERR, "Could not store value line %d", line);
+return 1;
+}
diff --git a/src/library/database.c b/src/library/database.c
index 44dd0b2..8d4adf3 100644
--- a/src/library/database.c
+++ b/src/library/database.c
@@ -39,6 +39,8 @@
 #include <signal.h>
 #include <sys/stat.h>
 #include <sys/types.h>
+#include <regex.h>
+#include <limits.h>

 #include "database.h"
 #include "message.h"
@@ -82,7 +84,7 @@ static int update_database(conf_t *config);
 extern volatile atomic_bool stop;
 extern volatile atomic_bool needs_flush;
 extern volatile atomic_bool reload_rules;
-
+extern char *path_trimmer;

 static int is_link(const char *path)
 {
@@ -615,6 +617,8 @@ static int create_database(int with_sync)

                list_item_t *item = list_get_first(&be->backend->list);
                for (; item != NULL; item = item->next) {
+                       if (path_trimmer[0] != '\0')
+                               item->index = get_last_regex_group(item->index);
                        if ((rc = write_db(item->index, item->data)))
                                msg(LOG_ERR,
                                    "Error (%d) writing key=\"%s\" data=\"%s\"",
@@ -1051,6 +1055,9 @@ int check_trust_database(const char *path, struct file_info *info, int fd)
                return -1;
        }

+       if (path_trimmer[0] != '\0')
+               path = get_last_regex_group(path);
+
        res = read_trust_db(path, &error, info, fd);
        if (error)
                retval = -1;
@@ -1208,6 +1215,11 @@ static int handle_record(const char * buffer)

        msg(LOG_DEBUG, "update_thread: Saving %s %s", path, data);
        lock_update_thread();
+
+       const char *path_ptr = &path[0];
+       if (path_trimmer[0] != '\0')
+               path_ptr = get_last_regex_group(path_ptr);
+
        write_db(path, data);
        unlock_update_thread();

diff --git a/src/library/file.c b/src/library/file.c
index 2dad8b2..b68c720 100644
--- a/src/library/file.c
+++ b/src/library/file.c
@@ -39,6 +39,7 @@
 #include <sys/xattr.h>
 #include <linux/hash_info.h>
 #include <sys/mman.h>
+#include <regex.h>

 #include "file.h"
 #include "message.h"
@@ -61,6 +62,9 @@ static char *get_program_cwd_from_pid(pid_t pid, size_t blen, char *buf)
 static void resolve_path(const char *pcwd, char *path, size_t len)
                                __attr_access ((__write_only__, 2, 3));

+// Global variables
+regex_t path_trimmer_compiled;
+
 // readelf -l path-to-app | grep 'Requesting' | cut -d':' -f2 | tr -d ' ]';
 static const char *interpreters[] = {
        "/lib64/ld-linux-x86-64.so.2",
@@ -878,3 +882,22 @@ rewind_out:
        return info;
 }

+// This function changes original path and returns the last regex capturing
+// group and the rest of the string, uses the compiled regex expression as
+// a global variable. Conversion is necessary to truncate the path to avoid
+// trusted files duplication. If no expression is found, the original path
+// is returned.
+const char *get_last_regex_group(const char *path)
+{
+    size_t max_groups = 8;
+    regmatch_t group_array[max_groups];
+
+    if (regexec(&path_trimmer_compiled, path, max_groups, group_array, 0) == 0)
+        for (size_t i = 0; i < max_groups; i++)
+                       if ((long unsigned int) group_array[i].rm_so == (size_t)-1) {
+                               memcpy((void *) path, (void *) path + group_array[i-1].rm_so,
+                                       strlen(path + group_array[i-1].rm_so) + 1);
+                               return path;
+                       }
+    return path;
+}
diff --git a/src/library/file.h b/src/library/file.h
index 624f174..f1c7e69 100644
--- a/src/library/file.h
+++ b/src/library/file.h
@@ -61,5 +61,6 @@ char *bytes2hex(char *final, const unsigned char *buf, unsigned int size)
 char *get_hash_from_fd2(int fd, size_t size, int is_sha) __attr_dealloc_free;
 int get_ima_hash(int fd, char *sha);
 uint32_t gather_elf(int fd, off_t size);
+const char *get_last_regex_group(const char *path);

 #endif
