# Get subnet

- name: Get subnet by IP @default
  ignore_errors: true
  set_fact:
    var_subnet: "{{item.0.key}}"
  loop: "{{ var_subnets | dict2items | subelements('value') }}"
  when: ansible_default_ipv4.address | ipaddr(item.1)
  tags: always

# Include vars

- name: Include all vars @default
  include_vars:
    dir: "{{playbook_dir}}/inventories/all/vars"
  tags: always

- name: Include subnet vars @default
  include_vars:
    file: "{{playbook_dir}}/inventories/subnets/{{var_subnet}}/vars/main.yml"
  tags: always

- name: Get ou @default
  block:
    - name: Get ou Sssd status @default
      changed_when: false
      shell: yes no | LANG=C.UTF8 /usr/sbin/sssctl domain-status {{var_local_domain}}
      register: sssctl_status
    - name: Get ou Kinit @default
      changed_when: false
      command: kinit -kt /etc/krb5.keytab '{{ansible_facts.nodename.split(".")[0]|upper}}$@{{var_default_realm}}'
    - name: Get ou Ldapsearch ou @default
      changed_when: false
      shell: >
        ldapsearch -o ldif-wrap=no -Y GSSAPI -H ldap://{{var_kdc.split(',')[0]}}
        -b "dc={{var_local_domain.split('.')[0]}},dc={{var_local_domain.split('.')[1]}}"
        "(&(objectClass=computer)(name={{ansible_facts.nodename.split('.')[0]}}))" |
        grep -i "dn:" |
        perl -MMIME::Base64 -n -00 -e 's/\n +//g;s/(?<=:: )(\S+)/decode_base64($1)/eg;print' |
        grep -o -i '\(ou=[^,]*\),\(ou=[^,]*\),\(ou=[^,]*\),dc={{var_local_domain.split('.')[0]}},dc={{var_local_domain.split('.')[1]}}' |
        sed -e 's/(/\\(/' -e 's/)/\\)/'
      register: ldap_search_ou_dn
    - name: Get ou Ldap_search giud @default
      changed_when: false
      shell: >
        ldapsearch -o ldif-wrap=no -Y GSSAPI -H ldap://{{var_kdc.split(',')[0]}}
        -b "dc={{var_local_domain.split('.')[0]}},dc={{var_local_domain.split('.')[1]}}"
        "(&(objectClass=organizationalUnit)(distinguishedName={{ldap_search_ou_dn.stdout_lines[0]}}))" |
        grep -i "objectGUID"
      register: ldap_search_ou_guid
    - name: Get ou Python uuid @default
      changed_when: false
      command: /usr/bin/python3
      args:
        stdin: |
          import base64, uuid
          print( str(uuid.UUID(bytes_le=base64.b64decode("{{ldap_search_ou_guid.stdout_lines[0].split()[1]}}"))) )
      register: python_ou_guid
    - name: Get ou Set fact @default
      set_fact:
        var_ou_dn: "{{ldap_search_ou_dn.stdout_lines[0]}}"
        var_ou_guid: "{{python_ou_guid.stdout_lines[0]}}"
      when:
        - ldap_search_ou_guid is defined
        - python_ou_guid is defined
  rescue:
    - name: Get ou Failed to get ou @default
      debug:
        msg: "Failed to get ou"
  when: var_installation_type == 'workstation'
  tags: always

- name: Include ou vars @default
  block:
    - name: Include ou vars Try @default
      include_vars:
        file: "{{playbook_dir}}/inventories/ou/{{var_ou_guid}}/vars/main.yml"
  rescue:
    - name: Include ou vars Failed @default
      debug:
        msg: "Failed to get ou inventory folder"
  when: var_ou_guid is defined
  tags: always

- name: Include distribution vars @default
  include_vars:
    file: "{{playbook_dir}}/inventories/distribution/{{ansible_distribution}}/{{ansible_distribution_major_version}}/vars/main.yml"
  tags: always

- name: Include branch vars @default
  failed_when: false
  include_vars:
    file: "{{playbook_dir}}/inventories/branches/{{var_company|lower}}/vars/main.yml"
  tags: always

# Check Intranet/Internet environment

- name: Get ansible server IP @default
  block:
    - name: Get ansible server IP @default
      wait_for:
        port: 443
        host: "{{var_ansible_fqdn}}"
        timeout: 5
      register: result
      ignore_errors: yes
      changed_when: false
    - name: Get ansible server IP @default
      set_fact:
        var_internal_ansible_ip: "{{not result.failed}}"
  tags: always

- name: Get external ansible server IP @default
  block:
    - name: Get external ansible server IP @default
      wait_for:
        port: 443
        host: "{{var_external_ansible_fqdn}}"
        timeout: 5
      register: result
      ignore_errors: yes
      changed_when: false
    - name: Get external ansible server IP @default
      set_fact:
        var_external_ansible_ip: "{{not result.failed}}"
  tags: always

# # Set flag mandatory control "ma"

- name: Check file exists @default
  stat:
    path: /etc/ansible/mandatory-access
  register: result
  tags: always

- name: Set mandatory-access @default
  set_fact:
    var_mandatory_access: true
  when: result.stat.exists
  tags: always

# Set flag admin workstations "aw"

- name: Check file exists @default
  stat:
    path: /etc/ansible/administrative-workstation
  register: result
  tags: always

- name: Set admin workstation @default
  set_fact:
    var_admin_workstation: true
  when: result.stat.exists
  tags: always

- name: Include profile vars @default
  include_vars:
    dir: "{{playbook_dir}}/inventories/profiles/admin/vars"
  when: var_admin_workstation
  tags: always

# Set flag superadmin workstations "sw"

- name: Check file exists @default
  stat:
    path: /etc/ansible/superadmin-workstation
  register: result
  tags: always

- name: Set superadmin workstation @default
  set_fact:
    var_superadmin_workstation: true
  when: result.stat.exists
  tags: always

- name: Include profile vars @default
  include_vars:
    dir: "{{playbook_dir}}/inventories/profiles/superadmin/vars"
  when: var_superadmin_workstation
  tags: always

# Set flag network auditd "na"

- name: Check file exists @default
  stat:
    path: /etc/ansible/network-auditd
  register: result
  tags: always

- name: Set admin workstation @default
  set_fact:
    var_network_auditd: true
  when: result.stat.exists
  tags: always

# Set flag always on display "ao"

- name: Check file exists @default
  stat:
    path: /etc/ansible/always-on-display
  register: result
  tags: always

- name: Set always on display @default
  set_fact:
    var_always_on_display: true
  when: result.stat.exists
  tags: always

# Set flag home with exec "he"

- name: Check file exists @default
  stat:
    path: /etc/ansible/home-with-exec
  register: result
  tags: always

- name: Set home with exec @default
  set_fact:
    var_home_with_exec: true
  when: result.stat.exists
  tags: always

# Set flag devel workstation "dw"

- name: Check file exists @default
  stat:
    path: /etc/ansible/devel-workstation
  register: result
  tags: always

- name: Set devel workstation @default
  set_fact:
    var_devel_workstation: true
  when: result.stat.exists
  tags: always

- name: Include profile vars @default
  include_vars:
    dir: "{{playbook_dir}}/inventories/env/devel/vars"
  when: var_devel_workstation
  tags: always

# Set flag unrestricted os "uo"

- name: Check file exists @default
  stat:
    path: /etc/ansible/unrestricted-os
  register: result
  tags: always

- name: Set unrestricted os @default
  set_fact:
    var_unrestricted_os: true
  when: result.stat.exists
  tags: always

# Set flag dist upgrade "du"

- name: Check file exists @default
  stat:
    path: /etc/ansible/dist-upgrade
  register: result
  tags: always

- name: Set devel repository @default
  set_fact:
    var_dist_upgrade: true
  when: result.stat.exists
  tags: always

# Set flag manual updates "mu"

- name: Check file exists @default
  stat:
    path: /etc/ansible/manual-updates
  register: result
  tags: always

- name: Set manual updates @default
  set_fact:
    var_manual_updates: true
    var_dist_upgrade: false
  when: result.stat.exists
  tags: always

# Set flag fs userspace "fu"

- name: Check file exists @default
  stat:
    path: /etc/ansible/fs-userspace
  register: result
  tags: always

- name: Set fs userspace @default
  set_fact:
    var_fs_userspace: true
  when: result.stat.exists
  tags: always

# Set flag thin client "tc"

- name: Check file exists @default
  stat:
    path: /etc/ansible/thin-client
  register: result
  tags: always

- name: Set thin client @default
  set_fact:
    var_thin_client: true
  when: result.stat.exists
  tags: always

# Set flag programmer workstation "pw"

- name: Check programmer workstation @default
  stat:
    path: /etc/ansible/programmer-workstation
  register: result
  tags: always

- name: Set programmer workstation @default
  set_fact:
    var_programmer_workstation: true
  when: result.stat.exists
  tags: always

# Set flag kde desktop "kd"

- name: Check kde-desktop @default
  stat:
    path: /etc/ansible/kde-desktop
  register: result
  tags: always

- name: Set kde-desktop @default
  set_fact:
    var_preffered_desktop: kde
  when: result.stat.exists
  tags: always

# Set flag fapolicyd service "fa"

- name: Check fapolicyd-service @default
  stat:
    path: /etc/ansible/fapolicyd-service
  register: result
  tags: always

- name: Check fapolicyd-service @default
  set_fact:
    var_fapolicyd_service: true
    var_mandatory_access_ima: false
  when: result.stat.exists
  tags: always

# Copy server cert

- name: Copy server certs @default
  copy:
    src: "{{item}}"
    dest: /usr/local/share/ca-certificates/
    mode: go+r
  with_fileglob:
    - "{{playbook_dir}}/{{var_certs_dir}}/https-cert.crt"
  tags: always

- name: Copy ca certs and script Update @default
  command: "{{'update-ca-certificates' if ansible_pkg_mgr == 'apt' else 'update-ca-trust'}}"
  changed_when: false
  tags: always

- name: Copy skip check cert conf @include_tasks
  copy:
    src: "{{playbook_dir}}/roles/pre-tasks/files/nocheckcert.conf"
    dest: /etc/apt/apt.conf.d/nocheckcert.conf
  when: ansible_pkg_mgr == 'apt'
  tags: always


