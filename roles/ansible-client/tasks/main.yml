- name: Epel package is present @epel_package_is_present
  package:
    name: "*epel-release*"
    state: present
  when: ansible_os_family in ['RedHat', 'Rocky']
  tags:
    - ws
    - epel_package_is_present

- name: Ansible package is present @ansible_package_is_present
  package:
    name:
      - ansible
    state: present
  tags:
    - ws
    - ansible_package_is_present

- name: Ansible cfg is present @ansible_cfg_is_present
  block:
    - name: Ansible cfg is present Folder @ansible_cfg_is_present
      file:
        path: /etc/ansible
        state: directory
    - name: Ansible cfg is present File @ansible_cfg_is_present
      file:
        path: /etc/ansible/ansible.cfg
        state: touch
        modification_time: preserve
        access_time: preserve
      register: result
    - name: Ansible cfg is present Defaults @ansible_cfg_is_present
      lineinfile:
        dest: /etc/ansible/ansible.cfg
        line: "[defaults]"
        insertbefore: BOF
  tags:
    - ws
    - ansible_cfg_is_present

- name: Config ansible environment @config_ansible_environment
  block:
    - name: Config ansible environment Timeout @config_ansible_environment
      lineinfile:
        dest: /etc/ansible/ansible.cfg
        state: present
        regexp: ^\s*gather_timeout
        line: gather_timeout = 60
        insertafter: \[defaults\]
    - name: Config ansible environment Log_path @config_ansible_environment
      lineinfile:
        dest: /etc/ansible/ansible.cfg
        state: present
        regexp: ^\s*log_path
        line: log_path = /var/log/ansible.log
        insertafter: \[defaults\]
    - name: Config ansible environment Logrotate @config_ansible_environment
      copy:
        dest: /etc/logrotate.d/ansible
        mode: a+r
        content: |
          /var/log/ansible.log {
            weekly
            missingok
            rotate 4
            compress
            delaycompress
            copytruncate
            maxsize 64M
          }
  tags:
    - ws
    - config_ansible_environment

- name: Config ansible stdout @config_ansible_stdout
  block:
    - name: Config ansible stdout @config_ansible_stdout
      lineinfile:
        dest: /etc/ansible/ansible.cfg
        regexp: ^#?\s*display_skipped_hosts.*
        line: display_skipped_hosts = False
        insertafter: \[defaults\]
    - name: Config ansible stdout @config_ansible_stdout
      lineinfile:
        dest: /etc/ansible/ansible.cfg
        regexp: ^#?\s*display_ok_hosts.*
        line: display_ok_hosts = False
        insertafter: \[defaults\]
  tags:
    - ws
    - config_ansible_stdout

- name: Create ansible user @create_ansible_user
  block:
    - name: Create ansible user Check group @create_ansible_user
      changed_when: false
      shell: "getent group {{var_ansible_group}} | wc -l"
      register: result
    - name: Create ansible user Group @create_ansible_user
      group:
        name: "{{var_ansible_group}}"
        gid: "{{var_ansible_gid}}"
        state: present
      when: result.stdout_lines[0] == '0'
    - name: Create ansible user Check user @create_ansible_user
      changed_when: false
      shell: "getent passwd {{var_ansible_username}} | wc -l"
      register: result
    - name: Create ansible user Useradd @create_ansible_user
      user:
        name: "{{var_ansible_username}}"
        uid: "{{var_ansible_uid}}"
        group: "{{var_ansible_group}}"
        groups: "{{'sudo,shadow' if ansible_os_family in ['Debian'] else 'wheel'}}"
        shell: /bin/bash
        append: yes
        generate_ssh_key: yes
        ssh_key_bits: 4096
        ssh_key_file: .ssh/id_rsa
      when: result.stdout_lines[0] == '0'
    - name: Create ansible user Lpadmin @create_ansible_user
      ignore_errors: true
      user:
        name: "{{var_ansible_username}}"
        groups: "{{'lpadmin' if ansible_os_family in ['Debian'] else 'lp'}}"
      when: result.stdout_lines[0] == '0'
    - name: Create ansible user Sudoers @create_ansible_user
      lineinfile:
        dest: /etc/sudoers
        state: present
        regexp: ^\s*ansible
        line: "{{var_ansible_username}} ALL=(ALL) EXEC:ALL, NOPASSWD:ALL"
        validate: /usr/sbin/visudo -cf %s
    - name: Create ansible user Add cert to authorized keys @create_ansible_user
      authorized_key:
        user: "{{var_ansible_username}}"
        state: present
        key: "{{var_ansible_key}}"
  tags:
    - ws
    - create_ansible_user

- name: Cron ansible pull @cron_ansible_pull
  block:
    - name: Cron ansible pull Package present @cron_ansible_pull
      package:
        name: ansible
        state: present
    - name: Cron ansible pull Copy file @cron_ansible_pull
      copy:
        dest: /etc/cron.d/ansible-pull
        content: |
          {{var_ansible_daily_exec_time}} * * * root sleep $((RANDOM \% 600)); bash -c "/usr/bin/ansible-pull -i localhost -d /root/.ansible/pull/{{var_ansible_repo}} -U {{var_ansible_git}} {{var_ansible_playbook}}| logger -n {{var_rsyslog_server}}"
          {{var_ansible_hourly_exec_time}} * * * * root sleep $((RANDOM \% 600)); bash -c "/usr/bin/ansible-pull -o -i localhost -d /root/.ansible/pull/{{var_ansible_repo}} -U {{var_ansible_git}} {{var_ansible_playbook}}| logger -n {{var_rsyslog_server}}"
          # EOF
      notify: Cron restarted
  tags:
    - ws
    - cron_ansible_pull

- name: Ansible pull systemd service @ansible_pull_systemd_service
  block:
    - name: Ansible pull systemd service Copy @ansible_pull_systemd_service
      template:
        src: "{{item}}.j2"
        dest: "/etc/systemd/system/{{item}}"
      register: result
      with_items:
        - ansible-pull.service
        - ansible-pull.timer
    - name: Ansible pull systemd service Service @ansible_pull_systemd_service
      systemd:
        name: ansible-pull
        daemon_reload: true
        enabled: no
    - name: Ansible pull systemd service Timer @ansible_pull_systemd_service
      systemd:
        name: ansible-pull.timer
        state: started
        enabled: yes
  tags:
    - ws
    - ansible_pull_systemd_service
