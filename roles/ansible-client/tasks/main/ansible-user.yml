
- name: Create ansible user @create_ansible_user
  ignore_errors: "{{ansible_check_mode}}"
  block:
    - name: Create ansible user Check group @create_ansible_user
      changed_when: false
      shell: "getent group {{var_ansible_group}} | wc -l"
      register: result
    - name: Create ansible user Group @create_ansible_user
      group:
        name: "{{var_ansible_group}}"
        gid: "{{var_ansible_gid}}"
        state: present
      when: result.stdout_lines[0] == '0'
    - name: Create ansible user Check user @create_ansible_user
      changed_when: false
      shell: "getent passwd {{var_ansible_username}} | wc -l"
      register: result
    - name: Create ansible user Useradd @create_ansible_user
      user:
        name: "{{var_ansible_username}}"
        uid: "{{var_ansible_uid}}"
        group: "{{var_ansible_group}}"
        groups: "{{'sudo,shadow' if ansible_os_family in ['Debian'] else 'wheel'}}"
        shell: /bin/bash
        append: yes
        generate_ssh_key: yes
        ssh_key_bits: 4096
        ssh_key_file: .ssh/id_rsa
      when: result.stdout_lines[0] == '0'
    - name: Create ansible user Lpadmin @create_ansible_user
      ignore_errors: true
      user:
        name: "{{var_ansible_username}}"
        groups: "{{'lpadmin' if ansible_os_family in ['Debian'] else 'lp'}}"
      when: result.stdout_lines[0] == '0'
    - name: Create ansible user Sudoers @create_ansible_user
      lineinfile:
        dest: /etc/sudoers
        state: present
        regexp: ^\s*ansible
        line: "{{var_ansible_username}} ALL=(ALL) EXEC:ALL, NOPASSWD:ALL"
        validate: /usr/sbin/visudo -cf %s
    - name: Create ansible user Add cert to authorized keys @create_ansible_user
      authorized_key:
        user: "{{var_ansible_username}}"
        state: present
        key: "{{var_ansible_key}}"
  tags:
    - ws
    - create_ansible_user



