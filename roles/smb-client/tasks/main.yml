- name: Enable service autofs Present @enable_autofs_service
  ignore_errors: "{{ansible_check_mode}}"
  package:
    name: autofs
    state: present
  tags:
    - ws
    - enable_autofs_service

- name: Set symlinks in home folder @set_symlinks_in_home_folder
  ignore_errors: "{{ansible_check_mode}}"
  copy:
    dest: /etc/profile.d/set-symlinks.sh
    mode: a+rx
    content: |
      #!/bin/bash
      #
      username=$(echo $USER | sed -e 's/^.*\\//g' -e 's/@.*$//g' -e 's/\(.*\)/\L\1/')
      find /media/$username/* -maxdepth 0 -type d -exec sh -c 'ln -s {} ~/$(basename {})' \; 2>/dev/null
  when:
  tags:
    - ws
    - set_symlinks_in_home_folder

- name: Set gtk bookmarks @set_gtk_bookmarks
  ignore_errors: "{{ansible_check_mode}}"
  copy:
    dest: /etc/profile.d/set-gtk-bookmarks.sh
    mode: a+rx
    content: |
      #!/bin/bash
      #
      username=$(echo $USER | sed -e 's/^.*\\//g' -e 's/@.*$//g' -e 's/\(.*\)/\L\1/')
      GTKCONFIG=~/.config/gtk-3.0
      BOOKMARKS=$GTKCONFIG/bookmarks
      MEDIA=file:///media/$username/dfs
      if [ -d ~/.config ]; then
        if [ ! -d "$GTKCONFIG" ]; then
          mkdir $GTKCONFIG
        fi
        if [ ! -f "$BOOKMARKS" ]; then
          touch $BOOKMARKS
        else
          if ! grep -Fxq "$MEDIA" "$BOOKMARKS"; then
            echo $MEDIA >> "$BOOKMARKS"
          fi
        fi
      fi
      #
  tags:
    - ws
    - set_gtk_bookmarks
    - never

- name: Set autofs volume definitions @set_autofs_volume
  ignore_errors: "{{ansible_check_mode}}"
  block:
    - name: Set autofs volume definitions Create auto.master.d @set_autofs_volume
      file:
        path: /etc/auto.master.d
        state: directory
    - name: Set autofs volume definitions Remove line @set_autofs_volume
      lineinfile:
        dest: /etc/auto.media
        state: absent
        regexp: '^\*'
    - name: Set autofs volume definitions Copy @set_autofs_volume
      blockinfile:
        dest: /etc/auto.media
        create: yes
        marker: "# {mark} ANSIBLE MANAGED BLOCK {{item.dir}}"
        content: |
          {{item.dir}} -fstype=cifs,sec=krb5,user=&,uid=$UID,gid=$GID,cruid=$UID,file_mode=0600,dir_mode=0700,cache=loose ://{{item.server}}/{{item.service}}
      with_items: "{{var_dfs}}"
    - name: Set autofs volume definitions Browse @set_autofs_volume
      lineinfile:
        dest: /etc/autofs.conf
        regexp: ^\s*browse_mode
        line: browse_mode = yes
    - name: Set autofs volume definitions Copy script @set_autofs_volume
      copy:
        dest: /usr/local/bin/autofs-media.sh
        mode: a+rx
        content: |
          #!/bin/bash
          #
          username=$(echo $PAM_USER | sed -e 's/^.*\\//g' -e 's/@.*$//g' -e 's/\(.*\)/\L\1/')
          n=$(id -u $PAM_USER)
          if [ $n -gt {{var_min_domain_uid}} ] && [ $n -lt {{var_max_domain_uid}} ]; then
            /bin/echo "/media/$username /etc/auto.media" > /etc/auto.master.d/$username.autofs
            /bin/systemctl reload autofs
          fi
    - name: Set autofs volume definitions Pam exec @set_autofs_volume
      lineinfile:
        dest: "{{'/etc/pam.d/common-session' if ansible_pkg_mgr == 'apt' else '/etc/pam.d/login'}}"
        regexp: ^\s*session\s*optional\s*pam_exec.so
        line: session optional pam_exec.so /usr/local/bin/autofs-media.sh
        insertafter: EOF
  tags:
    - ws
    - set_autofs_volume

- name: Samba client min protocol @samba_client_min_protocol
  ignore_errors: "{{ansible_check_mode}}"
  lineinfile:
      path: /etc/samba/smb.conf
      create: true
      regexp: ^[\s]*client\s*min\s*protocol\s*=.*$
      line: client min protocol = SMB2
      state: present
      insertafter: \[global\]
  tags:
    - ws
    - sec
    - mob
    - samba_client_min_protocol

- name: Samba client encrypt passwords absent @samba_client_encrypt_passwords_absent
  ignore_errors: "{{ansible_check_mode}}"
  lineinfile:
      path: /etc/samba/smb.conf
      regexp: ^\s*encrypt\s*passwords
      state: absent
  tags:
    - ws
    - sec
    - samba_client_encrypt_passwords_absent

- name: Samba client smb encrypt required @samba_client_smb_encrypt_required
  ignore_errors: "{{ansible_check_mode}}"
  lineinfile:
      path: /etc/samba/smb.conf
      create: true
      regexp: ^\s*smb\s*encrypt
      line: smb encrypt = required
      state: present
      insertafter: \[global\]
  tags:
    - ws
    - sec
    - samba_client_smb_encrypt_required

- name: Cifs upcall trust dns option @cifs_upcall_trust_dns
  ignore_errors: true
  block:
    - name: Cifs upcall trust dns option Set @cifs_upcall_trust_dns
      replace:
        path: /etc/request-key.d/cifs.spnego.conf
        regexp: 'cifs.upcall\s%k'
        replace: 'cifs.upcall -t %k'
      when: var_dfs[0]['server'] == var_local_domain
    - name: Cifs upcall trust dns option Unset @cifs_upcall_trust_dns
      replace:
        path: /etc/request-key.d/cifs.spnego.conf
        regexp: 'cifs.upcall\s-t\s%k'
        replace: 'cifs.upcall %k'
      when: var_dfs[0]['server'] != var_local_domain
  tags:
    - ws
    - sec
    - cifs_upcall_trust_dns

- name: Empty autofs master @empty_autofs_master_d
  blockinfile:
    dest: /etc/rc.local
    marker_begin: BEGIN_EMPTY_MASTER
    marker_end: END_EMPTY_MASTER
    block: |
      rm -f /etc/auto.master.d/*.autofs
    state: present
    create: true
  when:
    - var_installation_type == 'workstation'
  tags:
    - ws
    - sec
    - empty_autofs_master_d
